"use strict";Object.defineProperty(exports, "__esModule", {value: true});// src/vue/utils.ts
var _compilersfc = require('vue/compiler-sfc');
var parseSFC = (code, id) => {
  var _a;
  const { descriptor } = _compilersfc.parse.call(void 0, code, {
    filename: id
  });
  const lang = (_a = descriptor.script || descriptor.scriptSetup) == null ? void 0 : _a.lang;
  let scriptCompiled;
  return {
    ...descriptor,
    lang,
    get scriptCompiled() {
      if (scriptCompiled)
        return scriptCompiled;
      return scriptCompiled = _compilersfc.compileScript.call(void 0, descriptor, {
        id
      });
    }
  };
};
var addToScript = (ctx) => {
  const { scriptCode } = ctx;
  if (scriptCode.prepend.length + scriptCode.append.length === 0) {
    return;
  }
  const { sfc, s } = ctx;
  const { script, scriptSetup, lang } = sfc;
  if (script) {
    if (scriptCode.prepend) {
      s.appendRight(script.loc.start.offset, scriptCode.prepend);
      script.content = scriptCode.prepend + script.content;
    }
    if (scriptCode.append) {
      s.appendRight(script.loc.end.offset, scriptCode.append);
      script.content = script.content + scriptCode.append;
    }
  } else {
    const attrs = lang ? ` lang="${lang}"` : "";
    const content = `${scriptCode.prepend}
${scriptCode.append}`;
    s.prependLeft(0, `<script${attrs}>${content}<\/script>
`);
    sfc.script = {
      type: "script",
      content,
      attrs: (scriptSetup == null ? void 0 : scriptSetup.attrs) || {},
      loc: void 0
    };
  }
};




exports.parseSFC = parseSFC; exports.addToScript = addToScript;
