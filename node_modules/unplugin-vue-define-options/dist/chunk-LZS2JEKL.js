"use strict";Object.defineProperty(exports, "__esModule", {value: true});


var _chunkEY2ZUJDYjs = require('./chunk-EY2ZUJDY.js');

// src/core/transform.ts




var _common = require('@vue-macros/common');
var _astwalkerscope = require('ast-walker-scope');
var transform = (ctx) => {
  var _a;
  const { code } = ctx;
  if (!code.includes(_common.DEFINE_OPTIONS))
    return;
  const { sfc, s, id } = ctx;
  const { scriptSetup, scriptCompiled } = sfc;
  if (!scriptSetup)
    return;
  const startOffset = scriptSetup.loc.start.offset;
  const nodes = _chunkEY2ZUJDYjs.filterMacro.call(void 0, scriptCompiled.scriptSetupAst);
  if (nodes.length === 0)
    return;
  else if (nodes.length > 1)
    throw new SyntaxError(`duplicate ${_common.DEFINE_OPTIONS}() call`);
  if ((_a = scriptCompiled.scriptAst) == null ? void 0 : _a.some(
    (node2) => node2.type === "ExportDefaultDeclaration"
  ))
    throw new SyntaxError(
      `${_common.DEFINE_OPTIONS} cannot be used with default export within <script>.`
    );
  const [node] = nodes;
  const [arg] = node.arguments;
  if (!(node.arguments.length === 1 && arg.type === "ObjectExpression")) {
    throw new SyntaxError(`${_common.DEFINE_OPTIONS}() arguments error`);
  }
  if (_chunkEY2ZUJDYjs.hasPropsOrEmits.call(void 0, arg)) {
    throw new SyntaxError(
      `${_common.DEFINE_OPTIONS}() please use defineProps or defineEmits instead.`
    );
  }
  const scriptBindings = [];
  {
    const sfc2 = _common.parseSFC.call(void 0, s.toString(), id);
    if (sfc2.scriptCompiled.scriptSetupAst)
      scriptBindings.push(
        ...getIdentifiers(sfc2.scriptCompiled.scriptSetupAst)
      );
  }
  _common.checkInvalidScopeReference.call(void 0, arg, _common.DEFINE_OPTIONS, scriptBindings);
  const argText = code.slice(startOffset + arg.start, startOffset + arg.end);
  ctx.scriptCode.append += `import { defineComponent as DO_defineComponent } from 'vue';
export default /*#__PURE__*/ DO_defineComponent(${argText});
`;
  s.remove(startOffset + node.start, startOffset + node.end);
};
var getIdentifiers = (stmts) => {
  let ids = [];
  _astwalkerscope.walkAST.call(void 0, 
    {
      type: "Program",
      body: stmts,
      directives: [],
      sourceType: "module",
      sourceFile: ""
    },
    {
      enter(node) {
        if (node.type === "BlockStatement") {
          this.skip();
        }
      },
      leave(node) {
        if (node.type !== "Program")
          return;
        ids = Object.keys(this.scope);
      }
    }
  );
  return ids;
};



exports.transform = transform;
