var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  default: () => src_default
});
var import_fs_extra = __toESM(require("fs-extra"));
var import_debug = __toESM(require("debug"));
var debug = (0, import_debug.default)("vite-plugin-optimize-persist");
function VitePluginOptimizePersist({ delay = 1e3, filter = () => true } = {}) {
  return {
    name: "vite-plugin-optimize-persist",
    apply: "serve",
    configureServer(server) {
      var _a, _b;
      const vitePluginPackageConfigPlugin = server.config.plugins.find((plugin) => plugin.name === "vite-plugin-package-config");
      const pkgConfig = vitePluginPackageConfigPlugin == null ? void 0 : vitePluginPackageConfigPlugin.api.options;
      if (!pkgConfig)
        throw new Error('[vite-config-optimize-persist] plugin "vite-plugin-package-config" not found, have you installed it ?');
      const { packageJsonPath, field } = pkgConfig;
      let optimizeDepsMetadata = server._ssrExternals;
      const forceIncluded = ((_b = (_a = server.config) == null ? void 0 : _a.optimizeDeps) == null ? void 0 : _b.include) || [];
      let newDeps = [];
      let timer;
      function update() {
        newDeps = Object.keys((optimizeDepsMetadata == null ? void 0 : optimizeDepsMetadata.optimized) || {}).filter((dep) => !forceIncluded.includes(dep)).filter(filter);
        debug("newDeps", newDeps);
        clearTimeout(timer);
        timer = setTimeout(write, delay);
      }
      async function write() {
        if (!newDeps.length)
          return;
        debug(`writting to ${packageJsonPath}`);
        const pkg = await import_fs_extra.default.readJSON(packageJsonPath);
        pkg[field] = pkg[field] || {};
        const extend = pkg[field];
        extend.optimizeDeps = extend.optimizeDeps || {};
        extend.optimizeDeps.include = Array.from(/* @__PURE__ */ new Set([
          ...extend.optimizeDeps.include || [],
          ...newDeps
        ]));
        extend.optimizeDeps.include.sort();
        server.watcher.unwatch(packageJsonPath);
        await import_fs_extra.default.writeJSON(packageJsonPath, pkg, { spaces: 2 });
        server.watcher.add(packageJsonPath);
        debug("written");
      }
      Object.defineProperty(server, "_optimizeDepsMetadata", {
        get() {
          return optimizeDepsMetadata;
        },
        set(v) {
          optimizeDepsMetadata = v;
          update();
        }
      });
    }
  };
}
var src_default = VitePluginOptimizePersist;
module.exports = __toCommonJS(src_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});
