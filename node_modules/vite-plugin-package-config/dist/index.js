var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// src/index.ts
__export(exports, {
  default: () => src_default
});
var import_path = __toModule(require("path"));
var import_fs = __toModule(require("fs"));
var import_debug = __toModule(require("debug"));
var debug = (0, import_debug.default)("vite-plugin-package-config");
function VitePluginPackageConfig(options = {}) {
  const {
    packageJsonPath = (0, import_path.join)(process.cwd(), "package.json"),
    field = "vite"
  } = options;
  return {
    name: "vite-plugin-package-config",
    async config() {
      if (!(0, import_fs.existsSync)(packageJsonPath)) {
        debug("package.json not found at %s", packageJsonPath);
        return;
      }
      debug("loading package.json at %s", packageJsonPath);
      try {
        const packageJson = JSON.parse(await import_fs.promises.readFile(packageJsonPath, "utf-8"));
        const extend = packageJson[field];
        if (!extend) {
          debug("no %s field found in package.json, skip", field);
          return;
        }
        debug("merging config with %o", extend);
        return extend;
      } catch (e) {
        debug("parse error: %o", e);
        debug("error on loading package.json at %s, skip", packageJsonPath);
      }
    },
    api: {
      options: {
        packageJsonPath,
        field
      }
    }
  };
}
var src_default = VitePluginPackageConfig;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});
